// This mixin sets the font size and line height.
// Since it is used for multiple media queries in formstyle.scss, decided to make a mixin and reduce code
//
// As the line-height is not always set in these media queries, put some conditional code in to alter css
// based on whether or not the user wants to set the variables...
//
// The user can choose not to set a parameter by setting the input parameter to "none"
@mixin set-font-size-and-line-height($font-size, $line-height) {
	@if $font-size == "none" {
		line-height: $line-height;
	}
	@else if $line-height == "none" {
		font-size: $font-size;
	}
	@else {
		font-size: $font-size;
		line-height: $line-height;
	}
}

// This mixin sets form specific input parameters that vary over media queries
// Using a mixin to observe DRY principles and as they change over different media queries, need to be
// able to give input parameters
@mixin set-form-var-input-parameters($font-size, $width, $margin-top, $margin-right, $margin-bottom, $padding) {
	font-size: $font-size;
	width:$width;
	// Nest the margin property
	margin: {
		top: $margin-top;
		right: $margin-right;
		bottom: $margin-bottom;
	}
	padding: $padding;
}

// This mixin sets the fieldset parameters
@mixin set-form-fieldset {
	fieldset {
		border: medium none !important;
		margin: 0 0 10px;
		min-width: 100%;
		padding: 0;
		width: 100%;
		font:400 1em/1.5em "Lato", Helvetica, Arial, sans-serif;
		color: $form-primary-text-color;
		text-align: center;
	}
}

// This simple mixin sets the placeholder input text color for the various browser types
@mixin placeholder_set($text-color) {
	::-webkit-input-placeholder {
		color: $text-color;
	}
	:-moz-placeholder {
		color: $text-color;
	}
	::-moz-placeholder {
		color: $text-color;
	}
	:-ms-input-placeholder {
		color: $text-color;
	}
}